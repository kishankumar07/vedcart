<%- include('./layouts/header.ejs')%>

<style>
    .view-image {
    width: 100%; /* Adjust the width as needed */
    height: auto; /* Adjust the height as needed */
    /* Add any other styles as needed */
}



</style>





<!-- iziToast CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/izitoast/1.4.0/css/iziToast.min.css">
<!-- iziToast JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/izitoast/1.4.0/js/iziToast.min.js"></script>

<!-- cropper.js css -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<!-- CropperJS JS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">





<% if (message && message.length !== 0) { %>
    <script>
        
        iziToast.error({
            title: '<%= message %>',
            position: 'topRight',
            theme: 'dark',
        });
    </script>
<% } %>



<section class="content-main" id="addProductsPage">
    <div class="row">
        <div class="col-6">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
                
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form action="#" id="addProductForm" method="post" enctype="multipart/form-data" >
                    <div class="row">
                        <div class="col-md-3">
                            <h6>1. General info</h6>
                        </div>
                        <div class="col-md-9">
                            <div class="mb-4">
                                <label class="form-label">Product name</label>
                                <input type="text" id="productName" placeholder="Type here" class="form-control" name="productName">
                                <div class="error-message text-danger" id="name-error"></div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Description</label>
                                <textarea id="productDesc" name="productDesc" placeholder="Type here" class="form-control" rows="4"></textarea>
                                <div class="error-message text-danger" id="description-error"></div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Brand name</label>
                                <input id="productBrand" 
                                name="productBrand" type="text" placeholder="Type here" class="form-control">
                                <div class="error-message text-danger" id="brand-error"></div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Quantity</label>
                                <input id="productQty"
                                name="productQty" type="number"  class="form-control">
                                <div class="error-message text-danger" id="quantity-error"></div>
                            </div>
                        </div> <!-- col.// -->
                    </div> <!-- row.// -->
                    <hr class="mb-4 mt-0">
                    <div class="row">
                        <div class="col-md-3">
                            <h6>2. Pricing</h6>
                        </div>
                        <div class="col-md-9">
                            <div class="mb-4">
                                <label class="form-label">Cost </label>
                                <input type="text" id="productPrice" 
                                name="productPrice" class="form-control">
                                <div class="error-message text-danger" id="price-error"></div>
                            </div>
                        </div> <!-- col.// -->
                    </div> <!-- row.// -->
                    <hr class="mb-4 mt-0">
                    <div class="row">
                        <div class="col-md-3">
                            <h6>3. Date </h6>
                        </div>
                        <div class="col-md-9">
                            <div class="mb-4">
                                <label class="form-label">Date </label>
                        
                                <input type="date" id="date" name="date" class="form-control">

                                <div class="error-message text-danger" id="date-error"></div>
                            </div>
                        </div> <!-- col.// -->
                    </div> <!-- row.// -->
                    <hr class="mb-4 mt-0">
                    <div class="row">
                        <div class="col-md-3">
                            <h6>3. Category</h6>
                        </div>
                        <div class="col-md-9">
                            <div class="mb-4">
                                <% category.forEach((categ, index) => { %>
                                    <label class="mb-2 form-check form-check-inline" style="width: 45%;">
                                        <input class="form-check-input" name="productCat" type="radio" value="<%= categ._id %>" id="productCat<%= index %>">
                                        <span class="form-check-label"> <%= categ.name %> </span>
                                    </label>
                                <% }) %>
                            </div>
                            <!-- Error message element placed after all category input fields -->
                            <div class="category-error text-danger" id="category-error"></div>
                        </div>
                        
                    </div> <!-- row.// -->
                    <hr class="mb-4 mt-0">
                    <div class="row">
                        <div class="col-md-3">
                            <h6>4. Media</h6>
                        </div>
                        <div class="col-md-9">
                            <div class="mb-4">

                                <label class="form-label">Images</label>


                                <input id="image-input" name="productImages" class="form-control" type="file" multiple>


                                <div class="error-message text-danger" id="image-error"></div>

                            
        
                            </div>
                        </div> <!-- col.// -->
                        <div  id="cropped-images" class="row"></div>
                    </div> <!-- .row end// -->

                    


                    <div class="col-lg-9 image-preview d-none">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Crop images</h4>
                            </div>
                            <div>
                                <div id="image-preview" class="row"></div>
                            </div>
                            <div class="card-body col-lg-6">
                                <button type="button" id="crop-button" class="btn btn-md rounded font-sm hover-up" disabled> Crop Images</button>
                            </div>
                        </div>
                    </div>
                    <div>
                   
                        <button type="button" id="submitForm" class="btn btn-md rounded font-sm hover-up" disabled> Add Product</button>
                    </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    </div>
</section> <!-- content-main end// -->

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Bootstrap JS -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>




<script>


document.addEventListener("DOMContentLoaded", function() {
    // Your script here

    //---------- cropper.js ------------------------------
    let addProducts = document.getElementById('addProductsPage')
    if(addProducts){
      let inputImage = document.getElementById("image-input");
      let previewImageContainer = document.getElementById("image-preview");
      let cropButton = document.getElementById("crop-button");
      let croppers = [];
      let croppedDataArray = [];
      let croppedImagesContainer = document.getElementById("cropped-images");
      let submitForm = document.getElementById("submitForm");
      let productName = document.getElementById("productName");
      let productDesc = document.getElementById("productDesc");
      let productPrice = document.getElementById("productPrice");
      let productQty = document.getElementById("productQty");
      let productBrand = document.getElementById('productBrand');
      let date = document.getElementById('date');

      croppedImagesContainer.innerHTML= ''




      function validateForm() {
      let isValid = true;

      // Validate product name
      if (productName.value.trim() === '') {
      document.getElementById('name-error').textContent = 'Product name is required';
      isValid = false;
  } else if (productName.value !== productName.value.trim()) {
      document.getElementById('name-error').textContent = 'Product name should not have leading or trailing spaces';
      isValid = false;
  } else {
      document.getElementById('name-error').textContent = '';
  }

      // Validate product description
      if (productDesc.value.trim() === '') {
      document.getElementById('description-error').textContent = 'Product description is required';
      isValid = false;
  } else if (productDesc.value !== productDesc.value.trim()) {
      document.getElementById('description-error').textContent = 'Product description should not have leading or trailing spaces';
      isValid = false;
  } else {
      document.getElementById('description-error').textContent = '';
  }

       // Validate product price
  const priceValue = parseFloat(productPrice.value.trim());
  if (isNaN(priceValue)) {
      document.getElementById('price-error').textContent = 'Product price is required and should be a number';
      isValid = false;
  } else if (priceValue < 0) {
      document.getElementById('price-error').textContent = 'Product price cannot be negative';
      isValid = false;
  } else {
      document.getElementById('price-error').textContent = '';
  }

       // Validate product quantity
  const quantityValue = parseFloat(productQty.value.trim());
  if (isNaN(quantityValue)) {
      document.getElementById('quantity-error').textContent = 'Product quantity is required';
      isValid = false;
  } else if (quantityValue < 0) {
      document.getElementById('quantity-error').textContent = 'Stock value cannot be negative';
      isValid = false;
  } else {
      document.getElementById('quantity-error').textContent = '';
  }

      // Validate product brand
      if (productBrand.value.trim() === '') {
      document.getElementById('brand-error').textContent = 'Product brand is required';
      isValid = false;
  } else if (productBrand.value !== productBrand.value.trim()) {
      document.getElementById('brand-error').textContent = 'Product brand should not have leading or trailing spaces';
      isValid = false;
  } else {
      document.getElementById('brand-error').textContent = '';
  }

      // Validate product category
      let productCatChecked = document.querySelector('input[name="productCat"]:checked');
      if (!productCatChecked) {
          document.getElementById('category-error').textContent = 'Please select a product category';
          isValid = false;
      } else {
          document.getElementById('category-error').textContent = '';
      }

      return isValid;
    }





//-------------- starting of cropper.js------------------------------

      inputImage.addEventListener("change", (event) => {

// console.log('event object is : ',event)

        const files = event.target.files;
        const allowedTypes = ['image/jpeg', 'image/png', 'image/gif','image/webp']; 
        if (files.length + croppers.length > 3) {
    inputImage.value = '';
    iziToast.error({
        title: 'Error',
        message: 'select up to 3 images',
        position: 'topCenter', 
        timeout: 3000, 
    });
    return;
}

for (let file of files) {
      if (!allowedTypes.includes(file.type)) {
          inputImage.value = '';
          iziToast.error({
              title: 'Error',
              message: 'Only image files are allowed',
              position: 'topCenter',
              timeout: 2000,
          });
          return;
      }
  }



    
        if (files.length > 0) {
            document.querySelector('.image-preview').classList.remove('d-none'); 
        //   let divCount = previewImageContainer.querySelectorAll('.view-image').length;
         
        //   if(files.length + croppers.length >5){
        //     previewImageContainer.innerHTML = "";
        //     croppers.length = 0;
        //   }
          
          
    
          for (let file of files) {
            let reader = new FileReader();
    
            reader.onload = (readEvent) => {
              let image = new Image();
              image.src = readEvent.target.result;
    
              let preview = document.createElement("div");
              preview.classList.add("view-image", "col-md-6");
              preview.appendChild(image);
    
              previewImageContainer.appendChild(preview);
    
              cropButton.disabled = false;
    
            let cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1 
            });
    
    
              croppers.push(cropper);
            };
    
            reader.readAsDataURL(file);
          }
        }
      });
    
      cropButton.addEventListener("click", async () => {
        croppedImagesContainer.innerHTML=''
        submitForm.disabled = false;
        croppedDataArray = [];
        for (let cropper of croppers) {
          let croppedCanvas = cropper.getCroppedCanvas();
    
          let blobPromise = new Promise((resolve) => {
            croppedCanvas.toBlob((blob) => {
              resolve(blob);
            });
          });
          let blob = await blobPromise;
    
          croppedDataArray.push(blob);
          displayCroppedImage(croppedImagesContainer, blob);
        }
        
    
        inputImage.value = "";
      });
    
      function displayCroppedImage(targetDiv, blob) {
        
        let img = document.createElement("img");
        img.src = URL.createObjectURL(blob);
    
        let previewCroppedImage = document.createElement("div");
        previewCroppedImage.classList.add("col-lg-6");
        previewCroppedImage.appendChild(img);
    
        targetDiv.appendChild(previewCroppedImage);
      }
    
      submitForm.addEventListener("click", async (ev) => {
        console.log('reached here')
        let form = document.getElementById("addProductForm");
        ev.preventDefault();



 // Validate the form
 if (!validateForm()) {
          return;
      }


        let formData = new FormData();
        formData.append("productName", document.getElementById("productName").value);

        formData.append("productDesc", document.getElementById("productDesc").value);

        formData.append("productPrice", document.getElementById("productPrice").value);

        formData.append("productQty", document.getElementById("productQty").value);

        formData.append("productCat", document.querySelector('input[name="productCat"]:checked').value);

        formData.append("productBrand", document.getElementById("productBrand").value);
    
        formData.append("date", document.getElementById("date").value);

    
        
//this part is to append the images field to send to backend
        for (let i = 0; i < croppedDataArray.length; i++) {
        formData.append(`images`, croppedDataArray[i], `croppedImage_${i}.png`);
    }
    
       
    try {
          const response = await fetch("/admin/createProduct", {
              method: "POST",
              body: formData,
          });
          
          if (!response.ok) {
      const data = await response.json();
      throw new Error(data.message || 'Failed to add product');
  }

          const data = await response.json();
          

          if (data) {
          if (data.success) {
              Swal.fire({
                  title: 'Success!',
                  text: 'Product added successfully',
                  icon: 'success',
                  showConfirmButton: false,
                    timer: 1000,
                })
                setTimeout(()=>{
                    window.location.href = '/admin/product';
                },1500)
                   
          } else {
            console.log('data.message from server is :',data.message)
            throw new Error(data.message || 'An error occurred while adding the product');
          }
      }
      } catch (error) {
      

const errorMessage = error.message || 'An error occurred while adding the product';
const Toast = Swal.mixin({
    toast: true,
    position: "top-end",
    showConfirmButton: false,
    timer: 3000,
    timerProgressBar: true,
    didOpen: (toast) => {
        toast.onmouseenter = Swal.stopTimer;
        toast.onmouseleave = Swal.resumeTimer;
    }
});
Toast.fire({
    icon: "warning",
    title: errorMessage
});
      }

    });
       
    }
});


    </script>
    


<%- include('./layouts/footer.ejs')%>



