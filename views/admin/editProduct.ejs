<%- include('./layouts/header.ejs')%>



<style>
    .view-image {
    width: 100%; 
    height: auto; 
}



</style>




<!-- iziToast CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/izitoast/1.4.0/css/iziToast.min.css">
<!-- iziToast JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/izitoast/1.4.0/js/iziToast.min.js"></script>




<!-- cropper.js css -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<!-- CropperJS JS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">




<section class="content-main" id="editProductPage">
    <div class="container">
        <div class="row">
            <div class="col-lg-6">
                <div class="content-header">
                    <h2 class="content-title">Edit Product</h2>
                </div>
                <div class="card mb-4">
                    <div class="card-body">
                        <form action="#" id="addProductForm" method="post" enctype="multipart/form-data">
                            <!-- General Info -->
                            <div class="mb-4">
                                <h6>1. General Info</h6>
                                <label class="form-label">Product Name</label>
                                <input type="text" id="productName" class="form-control" value="<%= product.name %>" name="productName">
                                <div class="error-message text-danger" id="name-error"></div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Description</label>
                                <textarea name="productDesc" id="productDesc" class="form-control" rows="4"><%= product.description %></textarea>
                                <div class="error-message text-danger" id="description-error"></div>
                            </div>
                            <input type="hidden" name="id" value="<%= product._id %>">
                            <div class="mb-4">
                                <label class="form-label">Brand Name</label>
                                <input value="<%= product.brand %>" name="productBrand" id="productBrand" type="text" class="form-control">
                                <div class="error-message text-danger" id="brand-error"></div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Quantity</label>
                                <input value="<%= product.quantity %>" name="productQty" id="productQty" type="number" class="form-control">
                                <div class="error-message text-danger" id="quantity-error"></div>
                            </div>

                            <input type="hidden" name="id" value="<%= product._id %>">

                            <!-- Pricing -->
                            <hr class="mb-4 mt-0">
                            <div class="mb-4">
                                <h6>2. Pricing</h6>
                                <label class="form-label">Cost</label>
                                <input type="text" value="<%= product.price %>" id="productPrice" name="productPrice" class="form-control">
                                <div class="error-message text-danger" id="price-error"></div>
                            </div>
                            <!-- Date of Creation -->
                            <hr class="mb-4 mt-0">
                            <div class="mb-4">
                                <h6>3. Date of Creation</h6>
                                <label class="form-label">Date</label>
                                <input type="date" value="<%= moment(product.date).format('YYYY-MM-DD') %>" id="date" name="date" class="form-control">
                                <div class="error-message text-danger" id="date-error"></div>
                            </div>
                            <!-- Category -->
                            <hr class="mb-4 mt-0">
                            <div class="mb-4">
                                <h6>4. Category</h6>
                                <% category.forEach((categ,index) => { %>
                                <label class="mb-2 form-check form-check-inline" style="width: 45%;">
                                    <input class="form-check-input" id="productCat<%= index %>" name="productCat" type="radio" value="<%= categ.id %>" <%= product.category.id === categ.id ? 'checked' : '' %>>
                                    <span class="form-check-label"> <%= categ.name %> </span>
                                </label>
                                <% }) %>
                                <div class="category-error text-danger" id="category-error"></div>
                            </div>


 <!-- Display Images already present -->
 <div class="mb-4">
    <label class="form-label">Images</label>
    <% product.images.forEach((image, index) => { %>
        <div id="imageContainer_<%= index %>" class="image-container d-flex align-items-center justify-content-between mb-2">
            <div class="d-flex align-items-center">
                <img id="image_<%= index %>" src="/adminAssets/imgs/category/<%= image %>" class="existing-image" alt="Product Image" style="width: 30px; height: 30px; margin-right: 10px;">
                <span><%= image %></span>
            </div>
            <a href="#" onclick="confirmDelete('<%= index %>', '<%= product._id %>',event)" class="btn btn-danger btn-sm">Delete</a>
        </div>
    <% }) %>
</div>


                            <!-- Media -->
                            <hr class="mb-4 mt-0">
                            <div class="mb-4">
                                <h6>5. Media</h6>

                                <label class="form-label">Images</label>
                                <input id="image-input" name="productImages" class="form-control" type="file" multiple>

                              
                                <div class="error-message text-danger" id="image-error"></div>
                            </div>
                            <!-- Image Preview -->
                            <div id="cropped-images" class="row"></div>

                            <div class="col-lg-9 image-preview d-none">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h4>Crop Images</h4>
                                    </div>
                                    <div>
                                        <div id="image-preview" class="row"></div>
                                    </div>
                                    <div class="card-body col-lg-6">
                                        <button type="button" id="crop-button" class="btn btn-md rounded font-sm hover-up" disabled>Crop Images</button>
                                    </div>
                                </div>
                            </div>
                           
                            <!-- Submit Button -->
                            <div>
                                <button type="button" id="submitForm" class="btn btn-md rounded font-sm hover-up" >Publish</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>





<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Bootstrap JS -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>


document.addEventListener("DOMContentLoaded", function() {
    // Your script here

    //---------- cropper.js ------------------------------
    let addProducts = document.getElementById('editProductPage')
    if(addProducts){
      let inputImage = document.getElementById("image-input");
      let previewImageContainer = document.getElementById("image-preview");
      let cropButton = document.getElementById("crop-button");
      let croppers = [];
      let croppedDataArray = [];
      let croppedImagesContainer = document.getElementById("cropped-images");
      let submitForm = document.getElementById("submitForm");
      let productName = document.getElementById("productName");
      let productDesc = document.getElementById("productDesc");
      let productPrice = document.getElementById("productPrice");
      let productQty = document.getElementById("productQty");
      let productBrand = document.getElementById('productBrand');
      let date = document.getElementById('date');

      croppedImagesContainer.innerHTML= ''


//form validation ----------------
function validateForm() {
      let isValid = true;

      // Validate product name
      if (productName.value.trim() === '') {
      document.getElementById('name-error').textContent = 'Product name is required';
      isValid = false;
  } else if (productName.value !== productName.value.trim()) {
      document.getElementById('name-error').textContent = 'Product name should not have leading or trailing spaces';
      isValid = false;
  } else {
      document.getElementById('name-error').textContent = '';
  }

      // Validate product description
      if (productDesc.value.trim() === '') {
      document.getElementById('description-error').textContent = 'Product description is required';
      isValid = false;
  } else if (productDesc.value !== productDesc.value.trim()) {
      document.getElementById('description-error').textContent = 'Product description should not have leading or trailing spaces';
      isValid = false;
  } else {
      document.getElementById('description-error').textContent = '';
  }

       // Validate product price
  const priceValue = parseFloat(productPrice.value.trim());
  if (isNaN(priceValue)) {
      document.getElementById('price-error').textContent = 'Product price is required and should be a number';
      isValid = false;
  } else if (priceValue < 0) {
      document.getElementById('price-error').textContent = 'Product price cannot be negative';
      isValid = false;
  } else {
      document.getElementById('price-error').textContent = '';
  }

       // Validate product quantity
  const quantityValue = parseFloat(productQty.value.trim());
  if (isNaN(quantityValue)) {
      document.getElementById('quantity-error').textContent = 'Product quantity is required';
      isValid = false;
  } else if (quantityValue < 0) {
      document.getElementById('quantity-error').textContent = 'Stock value cannot be negative';
      isValid = false;
  } else {
      document.getElementById('quantity-error').textContent = '';
  }

      // Validate product brand
      if (productBrand.value.trim() === '') {
      document.getElementById('brand-error').textContent = 'Product brand is required';
      isValid = false;
  } else if (productBrand.value !== productBrand.value.trim()) {
      document.getElementById('brand-error').textContent = 'Product brand should not have leading or trailing spaces';
      isValid = false;
  } else {
      document.getElementById('brand-error').textContent = '';
  }

      // Validate product category
      let productCatChecked = document.querySelector('input[name="productCat"]:checked');
      if (!productCatChecked) {
          document.getElementById('category-error').textContent = 'Please select a product category';
          isValid = false;
      } else {
          document.getElementById('category-error').textContent = '';
      }

      return isValid;
    }




//-------------- starting of cropper.js------------------------------

      inputImage.addEventListener("change", (event) => {

// console.log('event object is : ',event)
         const files = event.target.files;
         console.log('files that are targeted  :',files)
        const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg','image/webp']; 

        if (files.length + croppers.length > 3) {
    inputImage.value = '';
    const Toast = Swal.mixin({
  toast: true,
  position: "top-end",
  showConfirmButton: false,
  timer: 3000,
  timerProgressBar: true,
  didOpen: (toast) => {
    toast.onmouseenter = Swal.stopTimer;
    toast.onmouseleave = Swal.resumeTimer;
  }
});
Toast.fire({
  icon: "warning",
  title: "Select upto 3 images",
});
    return;
}

// Check each file's MIME type
for (let file of files) {
      if (!allowedTypes.includes(file.type)) {
          inputImage.value = '';
          const Toast = Swal.mixin({
  toast: true,
  position: "top-end",
  showConfirmButton: false,
  timer: 3000,
  timerProgressBar: true,
  didOpen: (toast) => {
    toast.onmouseenter = Swal.stopTimer;
    toast.onmouseleave = Swal.resumeTimer;
  }
});
Toast.fire({
  icon: "warning",
  title:"Select only image files",
});
          return;
      }
  }



    
        if (files.length > 0) {
            document.querySelector('.image-preview').classList.remove('d-none'); 
        //   let divCount = previewImageContainer.querySelectorAll('.view-image').length;
         
        //   if(files.length + croppers.length >5){
        //     previewImageContainer.innerHTML = "";
        //     croppers.length = 0;
        //   }
          
          
    
          for (let file of files) {
            let reader = new FileReader();
    
            reader.onload = (readEvent) => {
              let image = new Image();
              image.src = readEvent.target.result;
    
              let preview = document.createElement("div");
              preview.classList.add("view-image", "col-md-6");
              preview.appendChild(image);
    
              previewImageContainer.appendChild(preview);
    
              cropButton.disabled = false;
    
            let cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1 
            });
    
    
              croppers.push(cropper);
            };
    
            reader.readAsDataURL(file);
          }
        }
      });
    
      cropButton.addEventListener("click", async () => {
        croppedImagesContainer.innerHTML=''
        submitForm.disabled = false;
        croppedDataArray = [];
        for (let cropper of croppers) {
          let croppedCanvas = cropper.getCroppedCanvas();
    
          let blobPromise = new Promise((resolve) => {
            croppedCanvas.toBlob((blob) => {
              resolve(blob);
            });
          });
          let blob = await blobPromise;
    
          croppedDataArray.push(blob);
          displayCroppedImage(croppedImagesContainer, blob);
        }
        
    
        inputImage.value = "";
      });
    
      function displayCroppedImage(targetDiv, blob) {
        
        let img = document.createElement("img");
        img.src = URL.createObjectURL(blob);
    
        let previewCroppedImage = document.createElement("div");
        previewCroppedImage.classList.add("col-lg-6");
        previewCroppedImage.appendChild(img);
    
        targetDiv.appendChild(previewCroppedImage);
      }
    



      submitForm.addEventListener("click", async (ev) => {
        console.log('form submittted 1stly')
        let form = document.getElementById("addProductForm");
        ev.preventDefault();



 // Validate the form
 if (!validateForm()) {
          return;
      }




        let formData = new FormData();

  // Inside the submitForm event listener

// Retrieve existing image elements
const existingImagesElements = document.querySelectorAll('.existing-image');

// Extract existing image URLs
const existingImages = Array.from(existingImagesElements).map(imageElement => imageElement.src);

// Append existingImages to the FormData object
formData.append("existingImages", JSON.stringify(existingImages));


        formData.append("id", document.querySelector('input[name="id"]').value);


        formData.append("productName", document.getElementById("productName").value);

        formData.append("productDesc", document.getElementById("productDesc").value);

        formData.append("productPrice", document.getElementById("productPrice").value);

        formData.append("productQty", document.getElementById("productQty").value);

        formData.append("productCat", document.querySelector('input[name="productCat"]:checked').value);

        formData.append("productBrand", document.getElementById("productBrand").value);
    
        formData.append("date", document.getElementById("date").value);

    
        

        
    
        for (let i = 0; i < croppedDataArray.length; i++) {
        formData.append(`images`, croppedDataArray[i], `croppedImage_${i}.png`);
    }
    
       
        fetch("/admin/productEdited", {
            method: "POST",
            body: formData,
        }).then(response => response.json())
        .then((data) => {
      if (data && data.message) {
          // Show error message if product already exists
          const Toast = Swal.mixin({
  toast: true,
  position: "top-end",
  showConfirmButton: false,
  timer: 3000,
  timerProgressBar: true,
  didOpen: (toast) => {
    toast.onmouseenter = Swal.stopTimer;
    toast.onmouseleave = Swal.resumeTimer;
  }
});
Toast.fire({
  icon: "warning",
  title: data.message,
});
      } else {
          // Redirect to product page on success
          Swal.fire({
              title: 'Success!',
              text: 'Product edited successfully',
              icon: 'success',
              confirmButtonText: 'OK',
          }).then((result) => {
              if (result.isConfirmed) {
                  window.location.href = '/admin/product';
              }
          });
      }
  })
  .catch((error) => {
    console.log('error from backend after validation whle product edited ',error)
    const Toast = Swal.mixin({
  toast: true,
  position: "top-end",
  showConfirmButton: false,
  timer: 3000,
  timerProgressBar: true,
  didOpen: (toast) => {
    toast.onmouseenter = Swal.stopTimer;
    toast.onmouseleave = Swal.resumeTimer;
  }
});
Toast.fire({
  icon: "warning",
  title: error.message,
});
  });
    });
    
      
    }
});




// delete image===============================
function confirmDelete(index, productId, event) {
    event.preventDefault();
    Swal.fire({
        title: 'Are you sure?',
        text: 'You are about to delete this image!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/deleteimage?index=${index}&id=${productId}`)
              .then(response => {
                  if (response.ok) {
                      const containerId = `imageContainer_${index}`;
                      const container = document.getElementById(containerId);
                      if (container) {
                          container.remove();
                          updateImageIndices(productId); 
                      } else {
                          throw new Error('Failed to delete image');
                      }
                  }
              })
              .catch(error => {
                  console.error('Error deleting image:', error);
              });
        }
    });
}
//this part is done to not to refresh the page and then just delete the container that holds the image.
function updateImageIndices(productId) {
    const containers = document.querySelectorAll('.image-container');
    containers.forEach((container, newIndex) => {
        console.log('index is of new :',newIndex)
        const oldIndex = container.id.split('_')[1];
        console.log('old index is :',oldIndex)
        if (newIndex != oldIndex) {
            // Update container ID
            container.id = `imageContainer_${newIndex}`;
            // Update image ID
            const img = container.querySelector('.existing-image');
            img.id = `image_${newIndex}`;
            // Update delete button onclick event
            const deleteButton = container.querySelector('.btn-danger');
            deleteButton.setAttribute('onclick', `confirmDelete(${newIndex}, '${productId}', event)`);
        }
    });
}


    </script>




<%- include('./layouts/footer.ejs')%>