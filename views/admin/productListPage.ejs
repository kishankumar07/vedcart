<%- include('./layouts/header') %>

<section class="content-main">
  <div class="content-header">
    <div>
      <h2 class="content-title card-title">Products</h2>
      <!-- <p>Add, edit or delete a category</p> -->
    </div>
    <div>
      <input
        type="text"
        id="searchInput"
        placeholder="Search Products"
        class="form-control bg-white"
      />
    </div>
    <div>
      <a href="/admin/addProduct" class="btn btn-primary btn-sm rounded"
        >Create new</a
      >
    </div>
  </div>
  <div class="card">
    <div class="card-body">
      <div class="row">
        <div class="col-md-12">
          <div class="table-responsive">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th class="text-center">
                    <div class="form-check">
                      <input
                        class="form-check-input"
                        type="checkbox"
                        value=""
                      />
                    </div>
                  </th>
                  <th>S.no</th>
                  <th>Name</th>
                  <th>Images</th>
                  <th>Category</th>
                  <th>Date</th>
                  <th>Stock</th>
                  <th>Price</th>
                  <th>Status</th>
                  <th>offer</th>

                  <th class="text-end">Action</th>
                </tr>
              </thead>
              <tbody>
                <% productData.forEach((product,i) => { %>
                <tr>
                  <td class="text-center">
                    <div class="form-check">
                      <input
                        class="form-check-input"
                        type="checkbox"
                        value=""
                      />
                    </div>
                  </td>
                  <td><%= i+1 %></td>
                  <td><%= product.name %></td>

                  <td>
                    <% for (let i = 0; i < product.images.length; i++) { %>

                    <img
                      src="/adminAssets/imgs/category/<%= product.images[i] %>"
                      alt="Product Image"
                      width="50"
                      height="50"
                    />

                    <% } %>
                  </td>
                  <td>
                    <%= product.category.name %>
                  
                  </td>
                  <td><%= moment(product.date).format('DD-MM-YYYY') %></td>
                
                  <td>
                    <% if (product.quantity === 0) { %>
                    <h5 style="color: red">0</h5>
                    <% } else if(product.quantity <=5) { %>
                    <span style="color: red"> <%=product.quantity%> </span>
                    <% } else if(product.quantity <=15) { %>
                    <span style="color: #3b5e33"> <%=product.quantity%></span>
                    <% }else{ %>
                    <span style="color: #3b5e33"> <%=product.quantity%></span>
                    <% } %>
                  </td>
                  <td>â‚¹ <%= product.price %></td>
                  <td>
                    <% if (product.status==='active') { %>

                    <a class="badge rounded-pill alert-success">Active</a>

                    <% } else { %>

                    <a class="badge rounded-pill alert-danger">Inactive</a>
                    <% } %>
                  </td>




                  <!-- offer part starts here -->
                  <td>
                    <!-- to check for 3 cases, 1 is : if offer exist and not expired here flag is zero, 2 :offer expired and want to delete the offer already applied , 3 is no offer and so here there is no offer and apply option would be there  -->
                    <% let flag = 0 %>
                   
                    <% if(product.offer && new Date(product.offer.endDate) > new Date()) { %>  
              
                      
                      <span                    
                          class="badge rounded-pill alert-success"><%= product.offer.name%>(<%=product.offer.discount %>%)</span><br>
                      <span><a style="color: red;" onclick="removeOffer('<%= product._id %>', '<%= flag %>')">Remove Offer</a></span>
                  
                      

                      <% } else if (product.offer && new Date(product.offer.endDate) < new Date()) { %>
                        <% flag++ %>           
                        <span class="badge rounded-pill alert-danger">Offer  <%= product.offer.name %>(<%=product.offer.discount %>%) had Expired</span><br>
                        <span><a style="color: red;" onclick="removeOffer('<%= product._id %>', '<%= flag %>')">Click to update</a></span>
                       


                      <%}else{%>
                        <span class="badge rounded-pill alert-warning"><a href="" data-toggle="modal" data-target="#productModal<%= product._id %>">Apply Offer</a></span><br>
                        <span>No offer</span>


                          <% } %>
                  </td>
                  <td class="text-end">
                    <!-- Three dropdown items here for listing unlisting and deleting -->

                    <div class="dropdown">
                      <a
                        href="#"
                        data-bs-toggle="dropdown"
                        class="btn btn-light rounded btn-sm font-sm"
                      >
                        <i class="material-icons md-more_horiz"></i>
                      </a>
                      <div class="dropdown-menu">
                        <a
                          class="dropdown-item"
                          id="list-item-<%= product.id %>"
                        >
                          <input
                            class="productId"
                            type="hidden"
                            value="<%= product.id %>"
                          />


                       
                         <span style="color: <%= product.status === 'active' ? 'red' : 'green' %>;">
                          <%= product.status === 'active' ? 'Unlist':'List' %>
                         </span>
                          




                        </a>

                        <a
                          class="dropdown-items"
                          style="margin-left: 15%"
                          href="/admin/editProduct?id=<%= product.id %>"
                          >Edit
                        </a>

                        <a
                          onclick="confirmDelete('<%= product.id %>')"
                          class="dropdown-item text-danger"
                          href=""
                          >Delete</a
                        >
                      </div>
                    </div>
                    <!-- dropdown //end -->
                  </td>
                </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
        </div>
        <!-- .col// -->
      </div>
      <!-- .row // -->
    </div>
    <!-- card body .// -->
  </div>









<!-- Modal for category offer that pops up when clicked on create offer -->
<% productData.forEach(product=>{ %>
	<div class="modal fade" id="productModal<%= product._id %>" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	  <div class="modal-dialog">
		<div class="modal-content">
		<div class="modal-header">
		  <h5 class="modal-title">Select Offer</h5>
		  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
			<span aria-hidden="true">&times;</span>
		  </button>
		</div>
    <div class="modal-body">
      <div class="">
        <div class="custom_select">
            <select class="form-select offer-select">
              <option selected>Select Offer for the products</option>
                      <% offerData.forEach((offer) => { %>
                        <option value="<%= offer._id %>"><%= offer.name %></option>
                      <% }) %>
            </select>
        </div>
    </div>
  </div>
		<div class="modal-footer">
		  <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
		  <button type="button" class="btn btn-primary save-offer-btn">Save</button>
     
		</div>
	  </div>
	  </div>
	</div>
  <% }) %>















  <div class="pagination-area mt-15 mb-50">
    <!-- Pagination -->
    <nav aria-label="Page navigation example">
      <ul class="pagination justify-content-start">
        <% for (let i = 1; i <= totalPages; i++) { %>
        <li class="page-item <%= i === currentPage ? 'active' : '' %>">
          <a class="page-link" href="?page=<%= i %>&limit=<%= limit %>"
            ><%= i %></a
          >
        </li>
        <% } %>
      </ul>
    </nav>
  </div>
  <!-- card .// -->
</section>
<!-- content-main end// -->

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



<!-- for modal to work start -->
<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>



<!-- Bootstrap JS -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<!-- for modal to work end -->


<script>
  //====== to list or unlist the product====================
  document.querySelectorAll(".dropdown-item").forEach((item) => {
    item.addEventListener("click", function (event) {
      event.preventDefault();
      let productId = this.querySelector(".productId").value;
      Swal.fire({
        title: "Are you sure?",
        text: "You are about to change the status of this Product.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Confirm",
      }).then((result) => {
        if (result.isConfirmed) {
          toggleBlockStatus(productId);
        }
      });

      function toggleBlockStatus(productId) {
        // Make a fetch request to toggle the block status
        fetch(`/admin/toggleBlockProduct?id=${productId}`, {
          method: "POST",
        })
          .then((response) => response.json())

          .then((data) => {
            if (data.value == "noRecord") {
              Swal.fire({
                title: "Product not found",

                icon: "warning",
                timer: 3000,
                showConfirmButton: false, // This removes the button
              });
            } else if (data.value == true) {
              window.location.reload();
            } else if (data.value === false) {
              window.location.href = "/error";
            }
          })

          .catch((error) => {
            console.error("Error toggling block status:", error);
          });
      }
    });
  });

  //==========For deleting the product from the listing individually
  function confirmDelete(productId) {
    Swal.fire({
      title: "Are you sure?",
      text: "You are about to delete this product. This action cannot be undone.",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes, delete it",
      cancelButtonText: "Cancel",
    }).then((result) => {
      if (result.isConfirmed) {
        // If confirmed, redirect to the delete product route with the product ID
        window.location.href = `/admin/deleteProduct?id=${productId}`;
      }
    });
  }

  // ================   Function to handle search   ====================

  const handleSearch = () => {
    const searchQuery = document.getElementById("searchInput").value.trim();

    axios
      .get(`/admin/searchProduct?search=${searchQuery}`)
      .then((response) => {
        const productTableBody = document.querySelector(".table tbody");
        productTableBody.innerHTML = ""; // Clear previous search results as soon as response comes from the server

        if (response.data.products.length === 0) {
          // Display message for empty search results
          productTableBody.innerHTML =
            '<tr><td colspan="9" class="text-center">No products found</td></tr>';
        } else {
          // Iterate over search results and append them to the table
          response.data.products.forEach((product, index) => {
            const productRow = `
            <tr>
            <td class="text-center">
              <div class="form-check">
                <input class="form-check-input" type="checkbox" value="">
              </div>
            </td>
            <td>${index + 1}</td>
            <td>${product.name}</td>
            <td>
              ${product.images
                .map(
                  (image) => `
                <img src="/adminAssets/imgs/category/${image}" alt="Product Image" width="50" height="50">
              `
                )
                .join("")}
            </td>

            <td>${moment(product.date).format('DD-MM-YYYY')}</td>

            <td>
              ${
                product.quantity <= 0
                  ? `<h5 style="color: red">0</h5>`
                  : product.quantity <= 5
                  ? `<span style="color: red">${product.quantity}</span>`
                  : `<span style="color: #3b5e33">${product.quantity}</span>`
              }
            </td>
            <td>â‚¹ ${product.price}</td>
            <td>
              ${
                product.status === "active"
                  ? `<a class="badge rounded-pill alert-success">Active</a>`
                  : `<a class="badge rounded-pill alert-danger">Inactive</a>`
              }
            </td>
            <td>
              ${
                product.offer
                  ? `<span class="badge rounded-pill alert-success" onclick="removeOffer('${product._id}')">${product.offer.name}(${product.offer.discount}%)</span><br><span><a style="color: red;" onclick="removeOffer('${product._id}')">Remove Offer</a></span>`
                  : `<span class="badge rounded-pill alert-warning"><a href="" data-toggle="modal" data-target="#productModal${product._id}">Apply Offer</a></span><br><span>No offer</span>`
              }
            </td>
            <td class="text-end">
              <!-- Three dropdown items here for listing unlisting and deleting -->
              <div class="dropdown">
                <a href="#" data-bs-toggle="dropdown" class="btn btn-light rounded btn-sm font-sm">
                  <i class="material-icons md-more_horiz"></i>
                </a>
                <div class="dropdown-menu">
                  <a class="dropdown-item" id="list-item-${product.id}">
                    <input class="productId" type="hidden" value="${product.id}">
                    ${product.status === 'active' ? '<span style="color: red">Unlist</span>' : '<span style="color: rgb(38, 213, 56)">List</span>'}
                  </a>
                  <a class="dropdown-items" style="margin-left: 15%;" href="/admin/editProduct?id=${product.id}">Edit</a>
                  <a onclick="confirmDelete('${product.id}')" class="dropdown-item text-danger" href="">Delete</a>
                </div>
              </div>
              <!-- dropdown //end -->
            </td>
          </tr>
        `;
            productTableBody.innerHTML += productRow;
          });
        }
      })
      .catch((error) => console.error("Error searching products:", error));
  };

  // Add event listener for input changes
  document
    .getElementById("searchInput")
    .addEventListener("input", handleSearch);




//===================== for selecting the offer---------------------------

document.addEventListener("DOMContentLoaded", function () {
        const saveButtons = document.querySelectorAll(".save-offer-btn");

        saveButtons.forEach((button) => {
            button.addEventListener("click", async function () {
                const modal = button.closest(".modal");
                const productId = modal.getAttribute("id").replace("productModal", "");
                const offerSelect = modal.querySelector(".offer-select");
                const offerId = offerSelect.value;

                try {



                    const response = await axios.patch("/admin/applyProductOffer", {
                        productId,
                        offerId
                    });

                    if (response.data.success) {
                                        
                        window.location.reload()
                    
                    } else {
                        // Handle failure, e.g., show an error message
                        console.error("Failed to apply category offer");
                    }
                } catch (error) {
                    console.error("Error applying category offer:", error);
                    window.location.href='/error'
                }
            });
        });
    });




//===========remove Prouduct offer ============================
async function removeOffer(productId,flag) {
    try {
        
    
      
if(flag === String(1)){

  // case when offer is expired and still showing on admin side, so inorder to remove without any swal message .Flag was set to 1 when swal not needed
  
  const response = await fetch("/admin/removeProductOffer", {
                method: "PATCH",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ productId })
            });
            if (response.ok) {
                const responseData = await response.json();

                const isConfirmed = await Swal.fire({
                title: 'Updated Successfully',
                icon: 'success',
                confirmButtonText: 'OK',
            });

            if (isConfirmed.value) {
                window.location.reload();
            }      
      }
}

else{

  const isConfirmedWarning = await Swal.fire({
            title: 'Are you sure?',
            text: "You want remove the offer!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, remove it!'
        });

        if (isConfirmedWarning.isConfirmed) {
          console.log('reached here')
            const response = await fetch("/admin/removeProductOffer", {
                method: "PATCH",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ productId })
            });
            console.log("hfkhjkhh");

            if (response.ok) {
                const responseData = await response.json();

                const isConfirmed = await Swal.fire({
                title: 'Offer Removed',
                icon: 'success',
                confirmButtonText: 'OK',
            });

            if (isConfirmed.value) {
                window.location.reload();
            }
            } else {
                console.error('Error removing offer:', response.statusText);
            }
        }
}
      
      } catch (error) {
        console.error(error);
    }
}



</script>

<%- include('./layouts/footer') %>











