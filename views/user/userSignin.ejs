<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Signin</title>
<link rel="shortcut icon" href="/userAssets/home/assets/images/icons/logo_dcs.jpeg">
    <!-- Font Icon -->
    <link rel="stylesheet" href="/userAssets/loginPage/fonts/material-icon/css/material-design-iconic-font.min.css">

    <!-- Main css -->
    <link rel="stylesheet" href="/userAssets/loginPage/css/style.css">
    <style>
        .forgot-password-link {
    cursor: pointer;
    text-decoration: underline;
    color: blue;
}

.forgot-password-link:hover {
    text-decoration: underline;
    color: #007bff;
}

    </style>
</head>
<body>

    <div class="main">

        

        <!-- Sing in  Form -->
        <section class="sign-in">
            <div class="container">
                <div class="signin-content">
                    <div class="signin-image">
                        <figure><img src="/userAssets/loginPage/images/login_.webp" alt="sing up image"></figure>
                        <a href="/signup" class="signup-image-link">Create an account</a>
                    </div>

                    <div class="signin-form">

                         <!-- error area -->

                        <% if ( message ){%>
            
                            <div class="alert-message" role="alert" style="color: red">
                              <%= message[0] %>
                            </div>
                            <%}%>

                            <!-- error area -->

                        <h2 class="form-title">Sign in</h2>
                        <form method="POST" action="/signin" class="register-form" id="login-form" onsubmit="return loginValidation()">
                            <div class="form-group">
                                <label for="email"><i class="zmdi zmdi-account material-icons-name"></i></label>
                                <input type="text" name="email" id="email" placeholder="Email" />
                                <p id="emailErr" class="error-message" style="color: red;"></p>
                            </div>
                            <div class="form-group">
                                <label for="password"><i class="zmdi zmdi-lock"></i></label>
                                <input type="password" name="password" id="your_pass" placeholder="Password" />
                                <span toggle="#your_pass" class="zmdi zmdi-eye field-icon toggle-password" style="position: absolute; top: 50%; right: 10px; transform: translateY(-50%);"></span>
                                <p id="passwordErr" class="error-message" style="color: red;"></p>
                            </div>
                            <div class="form-group">
                                <span id="forgot-password" class="forgot-password-link">Forgot password</span>
                            </div>
                            
                            <div class="form-group form-button">
                                <input type="submit" name="signin" id="signin" class="form-submit" value="Log in" />
                            </div>
                        </form>
                        
                        <div class="social-login">
                            <span class="social-label">Or login with</span>
                            <ul class="socials">
                                <li><a href="#" onclick="facebookInv()"><i class="display-flex-center zmdi zmdi-facebook"></i></a></li>
                              
                                <li><a href="/google" ><i class="display-flex-center zmdi zmdi-google"></i></a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </section>

    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        function loginValidation() {
    var email = document.getElementById('email').value.trim();
    var password = document.getElementById('your_pass').value.trim();

    // Reset error messages
    document.getElementById('emailErr').innerText = '';
    document.getElementById('passwordErr').innerText = '';

    var isValid = true;

    // Validate email
    if (email === '') {
        document.getElementById('emailErr').innerText = 'Email is required';
        isValid = false;
    } else if (!validateEmail(email)) {
        document.getElementById('emailErr').innerText = 'Invalid email format';
        isValid = false;
    }

    // Validate password
    if (password === '') {
        document.getElementById('passwordErr').innerText = 'Password is required';
        isValid = false;
    }

    return isValid;
}

function validateEmail(email) {
    // Simple email validation regex
    var emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}


// Password toggle
document.querySelector('.toggle-password').addEventListener('click', function() {
    var passwordInput = document.getElementById('your_pass');
    var fieldType = passwordInput.getAttribute('type');
    if (fieldType === 'password') {
        passwordInput.setAttribute('type', 'text');
        this.classList.remove('zmdi-eye');
        this.classList.add('zmdi-eye-off');
    } else {
        passwordInput.setAttribute('type', 'password');
        this.classList.remove('zmdi-eye-off');
        this.classList.add('zmdi-eye');
    }
});



//========== forgot password part -----------------------
document.querySelector('.forgot-password-link').addEventListener('click', async function() {
    const { value: email } = await Swal.fire({
        title: "Input email address",
        input: "email",
        inputPlaceholder: "Type here",
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value) {
                return 'You need to enter your email!';
            }
        }
    });

    if (email) {
        const confirmation = await Swal.fire({
            title: "Entered email is:",
            text: email,
            icon: "info",
            confirmButtonText: "OK"
        });

        if (confirmation.isConfirmed) {
            try {
                const response = await fetch(`/verify-email?email=${email}`, {
                    method: "POST"
                });

                if (!response.ok) {
                    const data = await response.json();
                    throw new Error(data.error || "User not found");
                }

                const data = await response.json();

                if (data.success) {
                    const { value: password } = await Swal.fire({
                        title: "Enter New Password",
                        input: "text",
                        inputPlaceholder: "Enter a strong password",
                        inputValidator: (value) => {
                            if (!value) {
                                return 'You need to enter a new password!';
                            } else if (!/^.{8,}$/.test(value)) {
                                return 'Password must be at least 8 characters long.';
                            } else if (/\s/.test(value)) {
                                return 'Password must not contain any spaces.';
                            }
                        }
                    });

                    if (password) {
                        const updateResponse = await fetch(`/update-password?email=${email}`, {
                            method: "POST",
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ password })
                        });

                        if (updateResponse.ok) {
                            Swal.fire({
                                title: "Success",
                                text: "Your password has been updated.",
                                icon: "success",
                                confirmButtonText: "OK"
                            });
                        } else {
                            const updateData = await updateResponse.json();
                            Swal.fire({
                                title: "Error",
                                text: updateData.message || "Failed to update password. Please try again.",
                                icon: "error",
                                confirmButtonText: "OK"
                            });
                        }
                    }
                } else {
                    Swal.fire({
                        title: "Error",
                        text: data.message,
                        icon: "error",
                        confirmButtonText: "OK"
                    });
                }
            } catch (error) {
                Swal.fire({
                    title: "Error",
                    html: `${error.message || "User not found, please register."} <br><br>
                           <a href="/signup" class="swal2-confirm swal2-styled" style="background-color: #fff;">Click here to register</a>`,
                    icon: "error",
                    showConfirmButton: false
                });
                console.error('Fetch error from verify-email:', error);
            }
        }
    }
});


//--------------------  facebook temporary message============
async function facebookInv(){
    let timerInterval;
Swal.fire({
    title: "Under Maintenance",
    html: "Please log in using Google for now.",
  timer: 3500,
  timerProgressBar: true,
  didOpen: () => {
    Swal.showLoading();
   
  },
  willClose: () => {
    clearInterval(timerInterval);
  }
})
}

//================== google temporary message ===================
async function googleInv(){
    let timerInterval;
Swal.fire({
    title: "Under Maintenance",
    html: "Will be back soon, Please login using OTP feature for now.",
  timer: 3500,
  timerProgressBar: true,
  didOpen: () => {
    Swal.showLoading();
   
  },
  willClose: () => {
    clearInterval(timerInterval);
  }
})
}








    </script>
    <!-- JS -->
    <!-- <script src="/userAssets/js/validation.js"></script> -->
    <script src="/userAssets/loginPage/vendor/jquery/jquery.min.js"></script>
    <script src="/userAssets/loginPage/js/main.js"></script>
</body><!-- This templates was made by Colorlib (https://colorlib.com) -->
</html>